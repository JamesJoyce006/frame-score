{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "050dcc2d-3404-47af-859a-965525df0d65",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import percentileofscore\n",
    "import joblib  \n",
    "\n",
    "\n",
    "# Load in Data and Model\n",
    "df_filtered = pd.read_csv('cleaned_for_python.csv')\n",
    "df_filtered = df_filtered[['Weight.x','Height','Converted_Arm','Converted_Hand','Position_Group']]\n",
    "bayesian_pipeline = joblib.load(\"bayesian_ridge_model.pkl\")  \n",
    "features = joblib.load(\"model_features.pkl\")  \n",
    "\n",
    "\n",
    "# Sidebar filters\n",
    "st.sidebar.header(\"Filters\")\n",
    "\n",
    "# Add 'All' option to position filter\n",
    "position_options = sorted(\n",
    "    [pos for pos in df_filtered[\"Position_Group\"].dropna().unique() if pos not in [\"DL\", \"OL\"]]\n",
    ")\n",
    "\n",
    "df_filtered.columns = ['HS_Weight','Height','Arm_Length','Hand_Size','Position_Group']\n",
    "\n",
    "# === User Inputs ===\n",
    "st.sidebar.header(\"Enter Player Metrics\")\n",
    "position = st.sidebar.selectbox(\"Position\", position_options)\n",
    "height = st.sidebar.number_input(\"Height (format: 6003 = 6'0\\\"3)\", min_value=50.0, max_value=7000.0, step= .125)\n",
    "hand_size = st.sidebar.number_input(\"Hand Size (inches)\", min_value=5.0, max_value=13.0, step=0.125)\n",
    "arm_length = st.sidebar.number_input(\"Arm Length (inches)\", min_value=10.0, max_value=90.0, step=0.125)\n",
    "hs_weight = st.sidebar.number_input(\"High School Weight\", min_value=0.0, max_value=400.0, step=0.125)\n",
    "\n",
    "\n",
    "df_filtered = df_filtered[df_filtered[\"Position_Group\"] == position]\n",
    "metrics = {\n",
    "    \"Height\": height,\n",
    "    \"Hand_Size\": hand_size,\n",
    "    \"HS_Weight\": hs_weight,\n",
    "    \"Arm_Length\": arm_length,\n",
    "    \n",
    "}\n",
    "\n",
    "def predict_college_weight(HS_Weight, Height, Converted_Hand, Converted_Arm, Position_Group):\n",
    "    # Create input DataFrame\n",
    "    input_df = pd.DataFrame({\n",
    "        'HS_Weight': [HS_Weight],\n",
    "        'Height': [Height],\n",
    "        'Converted_Hand': [Converted_Hand],\n",
    "        'Converted_Arm': [Converted_Arm],\n",
    "        'Position_Group': [Position_Group]\n",
    "    })\n",
    "\n",
    "    # Add interaction terms\n",
    "    for group in df_filtered['Position_Group'].unique():\n",
    "        input_df[f'HS_Weight_x_{group}'] = HS_Weight if Position_Group == group else 0\n",
    "\n",
    "    # Add missing columns with 0\n",
    "    for col in features:\n",
    "        if col not in input_df.columns:\n",
    "            input_df[col] = 0\n",
    "\n",
    "    # Reorder columns\n",
    "    input_df = input_df[features]\n",
    "\n",
    "    # Predict with interval\n",
    "    prediction, std = bayesian_pipeline.predict(input_df, return_std=True)\n",
    "    lower = prediction[0] - 1.96 * std[0]\n",
    "    upper = prediction[0] + 1.96 * std[0]\n",
    "\n",
    "    return prediction[0], lower, upper\n",
    "\n",
    "# === Run Prediction ===\n",
    "if st.sidebar.button(\"Predict College Weight\"):\n",
    "    pred, low, high = predict_college_weight(hs_weight, height, hand_size, arm_length, position)\n",
    "    st.markdown(f\"### ðŸ“Š Predicted College Weight: **{pred:.2f} lbs**\")\n",
    "    st.markdown(f\"95% Prediction Interval: **({low:.2f}, {high:.2f}) lbs**\")\n",
    "\n",
    "\n",
    "\n",
    "# UCLA colors\n",
    "UCLA_BLUE = \"#2774AE\"\n",
    "UCLA_GOLD = \"#FFD100\"\n",
    "\n",
    "# Plotting function\n",
    "def plot_percentile(data, value, metric):\n",
    "    percentile = percentileofscore(data, value)\n",
    "    fig, ax = plt.subplots()\n",
    "    sns.kdeplot(data, fill=True, color=UCLA_GOLD, ax=ax)\n",
    "    ax.axvline(value, color=UCLA_BLUE, linestyle=\"--\")\n",
    "    ax.text(value + 0.2, ax.get_ylim()[1] * 0.05, f\"{value} \\n{percentile:.1f}th pct\", color=UCLA_BLUE, fontweight='bold')\n",
    "    ax.set_title(f\"{metric} Distribution\")\n",
    "    ax.set_xlabel(metric)\n",
    "    ax.set_ylabel(\"Density\")\n",
    "    return fig\n",
    "\n",
    "# Show plots in a 2x2 grid\n",
    "st.subheader(\"Percentile Visualizations\")\n",
    "\n",
    "cols = st.columns(2)\n",
    "metric_names = list(metrics.keys())\n",
    "\n",
    "for i, metric in enumerate(metric_names):\n",
    "    value = metrics[metric]\n",
    "    with cols[i % 2]:\n",
    "        if metric in df_filtered.columns and df_filtered[metric].notna().sum() > 0:\n",
    "            fig = plot_percentile(df_filtered[metric].dropna(), value, metric)\n",
    "            st.pyplot(fig)\n",
    "        else:\n",
    "            st.write(f\"{metric} not found or insufficient data.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
